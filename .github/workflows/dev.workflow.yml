# This is a basic workflow to help you get started with Actions

name: Dione Maven Build CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Step 1 - Checkout DIONE main branch from GitHub
        uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Step 2 Set up JDK 1.8
        uses: actions/setup-java@v2.1.0
        with:
          java-version: '8'
          distribution: 'zulu'
          check-latest: true

      # Runs a set of commands using the runners shell
      - name: Step 3 GitHub Action Pre Deploy Phase
        run: |
           set -vx
           export GPG_TTY="$(tty)"
           sudo apt-get  update
           sudo apt-get install -y  gnupg2
           openssl version
           whoami
           gpg2 --version
           gpg2   --list-keys
           rm -rf /home/runner/.gnupg
           cp -r .gnupg /home/runner/
           chmod 700  /home/runner/.gnupg/
           chmod 700  /home/runner/.gnupg/private-keys-v1.d
           rm -f  /home/runner/.gnupg/private-keys-v1.d/*
           echo ${K417} > /home/runner/.gnupg/private-keys-v1.d/4173885F42A3CCAE41BEA91A3DBA93692F256A2A.key
           sed 's/\$//' /home/runner/.gnupg/private-keys-v1.d/4173885F42A3CCAE41BEA91A3DBA93692F256A2A.key > /home/runner/.gnupg/private-keys-v1.d/4173885F42A3CCAE41BEA91A3DBA93692F256A2A.key
           echo ${K464} > /home/runner/.gnupg/private-keys-v1.d/464A3C4A89B168A200C4E6454261B832D2FB55BA.key
           sed 's/\$//' home/runner/.gnupg/private-keys-v1.d/464A3C4A89B168A200C4E6454261B832D2FB55BA.key > home/runner/.gnupg/private-keys-v1.d/464A3C4A89B168A200C4E6454261B832D2FB55BA.key
           md5sum /home/runner/.gnupg/private-keys-v1.d/4173885F42A3CCAE41BEA91A3DBA93692F256A2A.key
           md5sum /home/runner/.gnupg/private-keys-v1.d/464A3C4A89B168A200C4E6454261B832D2FB55BA.key
           exit 0
           chmod 600  /home/runner/.gnupg/private-keys-v1.d/*
           gpgconf --reload gpg-agent
           ls -l /home/runner/.gnupg/private-keys-v1.d/
           gpg2 --import  /home/runner/.gnupg/pubring.gpg
           gpg --list-signatures --keyid-format short
           openssl enc -d -aes-256-cbc -pbkdf2 -iter ${ITER_VALUE} -in gpg.key.enc -out /home/runner/.gnupg/private-keys-v1.d/gpg.key -k ${K_VALUE}
           gpg2 --list-secret-keys --keyid-format long
           echo "starting build ...."
            mvn  -e  -B -V deploy -Ppublish --settings settings-ossrh.xml --file pom.xml
        env:
          ITER_VALUE: ${{secrets.ITER_VALUE}}
          K_VALUE: ${{secrets.K_VALUE}}
          GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}
          OSSRH_USERNAME: ${{secrets.OSSRH_USERNAME}}
          OSSRH_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
          K464: ${{secrets.K464}}
          K417: ${{secrets.K417}}
